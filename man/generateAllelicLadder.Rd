% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auxiliary.R
\name{generateAllelicLadder}
\alias{generateAllelicLadder}
\title{Generate an allelic ladder}
\usage{
generateAllelicLadder(markers, regions, frequencies, motifLength = NULL)
}
\arguments{
\item{markers}{A vector of the typed markers in the population.}

\item{regions}{A vector, or a list of vectors, of possible STR regions in the population.}

\item{motifLength}{A vector of the motif lengths of the markers.}

\item{frequncies}{A vector or a list of vectors, of the allele frequencies in the population.}
}
\value{
A \link{tibble}.
}
\description{

}
\details{
The 'regions' and 'frequencies' list (and/or vectors) should have the same length.

The length of the 'markers' vector should be the length of the regions and frequencies list (or vectors).

The regions should be given as either full or compressed STR regions. A compressed region is given as e.g. '[AATG]x[CGTT]y' corresponding to 'AATG' repeated 'x' times followed by 'CGTT' repeated 'y' times.
Note if the region has motifs which are not repeated e.g. '[AATG]xCTT', the non-repeated regions should also be encapsuled in square brackets, i.e. '[AATG]x[CTT]'.

The 'motifLength' parameter needs length 1, length equal to the length of 'markers', or 'NULL'. If 'NULL' it is assumed to be 4.
}
\examples{
library("htmltab")

markers <- c("TPOX", "D3S1358", "D5S818", "CSF1PO", "D7S820", "TH01", "VWA", "D13S317", "D16S539", "D18S51")
regions <- lapply(seq_along(markers), function(mm) {
    htmlTable <- htmltab(doc = paste("http://strbase.nist.gov/str_", markers[mm],".htm", sep = ""), which = 3)
    names(htmlTable) <- str_replace_all(names(htmlTable), fixed(" "), "")

    regions_mm <- htmlTable$RepeatStructure[str_detect(htmlTable$RepeatStructure, "\\\\[")]

    regionsRestructured <- sapply(str_split(regions_mm, " "), function(s) {
        s <- s[str_length(s) > 0]
        s <- unlist(str_split(unlist(str_split(s, "\\\\[")), "\\\\]"))
        s <- s[str_length(s) > 0]
        s <- unlist(str_split(str_replace(s, ".*?([0-9]+).*", "~\\\\1~"), "~"))
        s <- s[str_length(s) > 0]

        s <- ifelse(!str_detect(s, ".*?([0-9]+).*"), paste("[", s, "]", sep = ""), s)
        return(paste(s, collapse = ""))
    })

    return(regionsRestructured)
})

frequencies <- lapply(regions, function(r) {
    gammaDraw <- rgamma(length(r), shape = 1, rate = 4)
    gammaDraw / sum(gammaDraw)
})

examplePopulation <- generateAllelicLadder(markers, regions, frequencies)
}
